@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

#register {
    position: relative;
    min-height: 100vh;
    background: url('../img/register.jpg');
    background-color: hsl(210, 5%, 5%);
    background-blend-mode: color-dodge;
    background-size: cover;
    background-position: center;
    backdrop-filter: blur(1px);
}

#form-element {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 25rem;
    display: flex;
    flex-direction: column;
    box-shadow: 0px 8px 30px #222A33;
    border-radius: 40px;
    background-color: #aaa3;
    backdrop-filter: blur(8px);
    color: #fff;
    padding: 2rem 2rem;
    gap:0.91rem;
}

#stepCount {
    font-size: 0.95rem;
    width: 100%;
    text-align: center;
}

#register-form {
    height: 80%; 
    display: flex;
    flex-direction: column;
    font-family: Roboto;
    gap: 1rem;
}

#register-form input:focus,
#register-form button:focus {
    outline: 2px solid #0af;
}

.form-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: stretch;
    flex-grow: 1;
    justify-content: space-evenly;
}

.form-section.acknowledge {
    justify-content: initial;
    row-gap: 1rem;
}

.form-section .heading {
    margin-bottom: 0.3rem;
}

.form-section h1 {
    font-size: 2rem;
    text-align: center;
    text-transform: capitalize;
}

.form-section > .heading > h1 {
    margin-bottom: 0.6rem;
}

.form-section h2,
.form-section h3 {
    font-size: 0.9rem;
    text-align: center;
    font-weight: normal;
}

.form-section h3 > span {
    color: tomato;
    font-size: 1rem;
    margin-right: 0.2rem;
}

.form-div {
    display: flex;
    flex-direction: column;

}

.form-label {
    font-size: 0.9rem;
}
.form-label>.required {
    margin-left: 0.2rem;
    color: tomato;
    font-size: 1.25rem;
}

.form-input {
    width: 100%;
    padding: 0.5rem;
    color: #efefef;
    background: transparent;
    border: none;
    border-bottom: 2px solid #efefef;
    transition: all 300ms ease-in-out;
    outline: none !important;
    
}

.form-input:focus {
    border-bottom: 2px solid cyan;
    outline: none;
}

/* .form-input.text {

} */

.form-input.date {
    font-family: Roboto;
    text-transform: uppercase;
}

.form-input.textarea {
    resize: none;
    font-family: Roboto;
}

.form-input.select {
    /* appearance: none; */
    cursor: pointer;
}

.form-input.select option {
    color: #1A1A1A;
    background-color: #eee;
}

.form-error {
    font-size: 0.75rem;
    color: tomato;
    opacity: 0;
    margin-top: 6px;
    /* display: none; */
}

.form-input:invalid {
    border-bottom: 2px solid tomato;
}

.form-input:invalid+.form-error {
    opacity: 1;
    /* display: block; */
}

.form-checkboxes {
    display: flex;
    gap: 0.6rem;
    --background-color: #fff;
    --checkbox-height: 1.2rem;
    /* align-items: center; */
}

.form-checkboxes > span {
    font-size: 0.9rem;
    width: calc(100% - var(--checkbox-height));
}

#form-btns {
    width: 100%;
    display: flex;
    gap: 1rem;
    /* height: 2.5rem; */

}

#form-btns>* {
    /* width: 5rem; */
    border-radius: 30px;
    box-shadow: none;
    cursor: pointer;
    border: 2px solid #1A1A1A;
    background-color: #fff;
    color: #000;
    font-size: 0.9rem;
    padding: 0.5rem 1.35rem;
    text-align: center;
    text-decoration: none;
    transition: all 300ms cubic-bezier(.23, 1, 0.32, 1), opacity 300ms ease;
    user-select: none;
    -webkit-user-select: none;
    touch-action: manipulation;
    will-change: transform;
    appearance: none;
    opacity: 1;
    filter: grayscale(0);
}

/* #form-btns>*:not(:disabled) {
    font-weight: bold;
} */

#form-btns>*:disabled {
    cursor: not-allowed;
    filter: grayscale(1);
    background-color: #ddd;
    border: 2px solid #777;
    opacity: 0.6;
}

#form-btns>*:not(:disabled):hover {
    color: #fff;
    background-color: #1A1A1A;
    box-shadow: rgba(0, 0, 0, 0.25) 0 8px 15px;
    transform: translateY(-2px);
}

#form-btns>*:active {
    box-shadow: none;
    transform: translateY(0);
}

@keyframes fromCheck {
    from { height: 0 }
    to { height: calc(var(--checkbox-height) / 2) }
}

@keyframes toCheck {
    from { height: 0 }
    50% { height: 0 }
    to { height: calc(var(--checkbox-height) * 1.2) }
}

.form-checkboxes input[type=checkbox] {
    opacity: 0;
    position: absolute;
    z-index: -30;
}

.form-checkboxes .form-statement {
    margin-top: 3px;
    height: var(--checkbox-height);
    width: var(--checkbox-height) !important;
    background-color: white;
    border: calc(var(--checkbox-height) * .1) solid #000;
    border-radius: 5px;
    position: relative;
    display: inline-block;
    transition: border-color ease 0.2s;
    cursor: pointer;
}
.form-checkboxes input[type="checkbox"]:focus+.form-statement {
    outline: #0af solid 2px;
}

.form-checkboxes .form-statement::before,
.form-checkboxes .form-statement::after {
    position: absolute;
    height: 0;
    width: calc(var(--checkbox-height) * .2);
    background-color: green;
    display: inline-block;
    transform-origin: left top;
    border-radius: 5px;
    content: "";
    transition: opacity ease 0.5;
}

.form-checkboxes .form-statement::before {
    top: calc(var(--checkbox-height) * .72);
    left: calc(var(--checkbox-height) * .41);
    box-shadow: 0 0 0 calc(var(--checkbox-height) * .05) var(--background-color);
    transform: rotate(-135deg);
}

.form-checkboxes .form-statement::after {
    top: calc(var(--checkbox-height) * .37);
    left: calc(var(--checkbox-height) * .05);
    transform: rotate(-45deg);
}

.form-checkboxes input[type=checkbox]:checked+.form-statement,
.form-checkboxes .form-statement.checked {
    border-color: green;
}

.form-checkboxes input[type=checkbox]:checked+.form-statement::after,
.form-checkboxes .form-statement.checked::after {
    height: calc(var(--checkbox-height) / 2);
    animation: fromCheck 0.2s ease 0s forwards;
}

.form-checkboxes input[type=checkbox]:checked+.form-statement::before,
.form-checkboxes .form-statement.checked::before {
    height: calc(var(--checkbox-height) * 1.2);
    animation: toCheck 0.4s ease 0s forwards;
}  